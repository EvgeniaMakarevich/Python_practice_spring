{
  "uid" : "ad82a5771e02d1db",
  "name" : "test_drag_drop",
  "fullName" : "Tests.test_lesson_3.test_drag_and_drop.TestDragDrop#test_drag_drop",
  "historyId" : "5c24b9cfa423f28dae8b157be0bc72ff",
  "time" : {
    "start" : 1714849380500,
    "stop" : 1714849395219,
    "duration" : 14719
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id='droppable']/p[contains(text(),'Dropped')]\"}\n  (Session info: chrome-headless-shell=124.0.6367.60); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n#0 0x55749d78dcb3 <unknown>\n#1 0x55749d47c4a7 <unknown>\n#2 0x55749d4c731d <unknown>\n#3 0x55749d4c73d1 <unknown>\n#4 0x55749d50a734 <unknown>\n#5 0x55749d4e943d <unknown>\n#6 0x55749d507be9 <unknown>\n#7 0x55749d4e91b3 <unknown>\n#8 0x55749d4ba24a <unknown>\n#9 0x55749d4bac1e <unknown>\n#10 0x55749d751fdb <unknown>\n#11 0x55749d755f2b <unknown>\n#12 0x55749d73e0f1 <unknown>\n#13 0x55749d756a92 <unknown>\n#14 0x55749d722faf <unknown>\n#15 0x55749d77ce08 <unknown>\n#16 0x55749d77cfe0 <unknown>\n#17 0x55749d78ce04 <unknown>\n#18 0x7fcf36894ac3 <unknown>",
  "statusTrace" : "self = <Tests.test_lesson_3.test_drag_and_drop.TestDragDrop object at 0x7f5b14d09e10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b09d80d4a4cf6022320c99e81540fa02\")>\n\n    def test_drag_drop(self, driver):\n        test = DragDrop()\n        driver.get('https://demoqa.com/droppable')\n        test.drag_and_drop(driver, self.locators.drag, self.locators.drop)\n>       text = driver.find_element(*self.locators.drag_drop_text).text\n\nTests/test_lesson_3/test_drag_and_drop.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5b14b8fc90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\\\n#16 0x55749d77cfe0 \\\\u003Cunknown>\\\\n#17 0x55749d78ce04 \\\\u003Cunknown>\\\\n#18 0x7fcf36894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id='droppable']/p[contains(text(),'Dropped')]\"}\nE         (Session info: chrome-headless-shell=124.0.6367.60); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       #0 0x55749d78dcb3 <unknown>\nE       #1 0x55749d47c4a7 <unknown>\nE       #2 0x55749d4c731d <unknown>\nE       #3 0x55749d4c73d1 <unknown>\nE       #4 0x55749d50a734 <unknown>\nE       #5 0x55749d4e943d <unknown>\nE       #6 0x55749d507be9 <unknown>\nE       #7 0x55749d4e91b3 <unknown>\nE       #8 0x55749d4ba24a <unknown>\nE       #9 0x55749d4bac1e <unknown>\nE       #10 0x55749d751fdb <unknown>\nE       #11 0x55749d755f2b <unknown>\nE       #12 0x55749d73e0f1 <unknown>\nE       #13 0x55749d756a92 <unknown>\nE       #14 0x55749d722faf <unknown>\nE       #15 0x55749d77ce08 <unknown>\nE       #16 0x55749d77cfe0 <unknown>\nE       #17 0x55749d78ce04 <unknown>\nE       #18 0x7fcf36894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: NoSuchElementException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1714849311065,
      "stop" : 1714849311080,
      "duration" : 15
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1714849380217,
      "stop" : 1714849380500,
      "duration" : 283
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "options",
    "time" : {
      "start" : 1714849380217,
      "stop" : 1714849380217,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1714849395269,
      "stop" : 1714849395322,
      "duration" : 53
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "Tests.test_lesson_3"
  }, {
    "name" : "suite",
    "value" : "test_drag_and_drop"
  }, {
    "name" : "subSuite",
    "value" : "TestDragDrop"
  }, {
    "name" : "host",
    "value" : "fv-az1429-226"
  }, {
    "name" : "thread",
    "value" : "2241-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Tests.test_lesson_3.test_drag_and_drop"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 2
      },
      "items" : [ {
        "uid" : "3bfb8530ded63c7",
        "reportUrl" : "https://EvgeniaMakarevich.github.io/Python_practice_spring/5//#testresult/3bfb8530ded63c7",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /opt/google/chrome/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55d8b614ecb3 <unknown>\n#1 0x55d8b5e3d4a7 <unknown>\n#2 0x55d8b5e71a26 <unknown>\n#3 0x55d8b5e6d980 <unknown>\n#4 0x55d8b5eb67b0 <unknown>\n#5 0x55d8b5eaa1b3 <unknown>\n#6 0x55d8b5e7b24a <unknown>\n#7 0x55d8b5e7bc1e <unknown>\n#8 0x55d8b6112fdb <unknown>\n#9 0x55d8b6116f2b <unknown>\n#10 0x55d8b60ff0f1 <unknown>\n#11 0x55d8b6117a92 <unknown>\n#12 0x55d8b60e3faf <unknown>\n#13 0x55d8b613de08 <unknown>\n#14 0x55d8b613dfe0 <unknown>\n#15 0x55d8b614de04 <unknown>\n#16 0x7f90c0494ac3 <unknown>",
        "time" : {
          "start" : 1714822785640,
          "stop" : 1714822785640,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "ad82a5771e02d1db.json",
  "parameterValues" : [ ]
}